name: Maven Build, Test , run, and copy to second repo

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4.1.1

    - name: Set up JDK 11
      uses: actions/setup-java@v3.13.0
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: maven

    - name: Build with Maven
      run: mvn -B package --file pom.xml

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4.1.1

    - name: Set up JDK 11
      uses: actions/setup-java@v3.13.0
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: maven

    - name: Run Tests with Maven
    
      run: mvn test --file pom.xml

  secure:
    needs: test
    name: Microsoft Security DevOps Analysis
    # MSDO runs on windows-latest.
    # ubuntu-latest also supported
    runs-on: windows-latest
    steps:
      # Checkout your code repository to scan
    - uses: actions/checkout@v3
      # Run analyzers
    - name: Run Microsoft Security DevOps Analysis
      uses: microsoft/security-devops-action@latest
      id: msdo
      with:
        policy: 'GitHub'
      # config: string. Optional. A file path to an MSDO configuration file ('*.gdnconfig').
      # policy: 'GitHub' | 'microsoft' | 'none'. Optional. The name of a well-known Microsoft policy. If no configuration file or list of tools is provided, the policy may instruct MSDO which tools to run. Default: GitHub.
      # categories: string. Optional. A comma-separated list of analyzer categories to run. Values: 'secrets', 'code', 'artifacts', 'IaC', 'containers. Example: 'IaC,secrets'. Defaults to all.
      # languages: string. Optional. A comma-separated list of languages to analyze. Example: 'javascript,typescript'. Defaults to all.
      # tools: string. Optional. A comma-separated list of analyzer tools to run. Values: 'bandit', 'binskim', 'eslint', 'templateanalyzer', 'terrascan', 'trivy'.

      # Upload alerts to the Security tab
    - name: Upload alerts to Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: ${{ steps.msdo.outputs.sarifFile }}

      # Upload alerts file as a workflow artifact
    - name: Upload alerts file as a workflow artifact
      uses: actions/upload-artifact@v3
      with:  
        name: alerts
        path: ${{ steps.msdo.outputs.sarifFile }}
      
  build-and-push:
    #build image and push
    needs: secure
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4.1.1

    - name: Set up JDK 11
      uses: actions/setup-java@v3.13.0
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: maven

    - name: Log in to Docker Hub
      uses: docker/login-action@v3.1.0
      with:
        username: ${{ secrets.DOCKERHUB_ID }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
        
    - name: Set up Docker Repository Prefix
      run: |
        echo "REPOSITORY_PREFIX=${{ secrets.DOCKERHUB_ID }}" >> $GITHUB_ENV
        echo "IMAGE_TAG=${GITHUB_SHA}" >> $GITHUB_ENV
    
    - name: Build and Push Docker Images
      run: mvn spring-boot:build-image -Pk8s -DREPOSITORY_PREFIX=${{ secrets.DOCKERHUB_ID }} && ./scripts/pushImages.sh
  
  clone-and-push:
    #needs: clone-and-push
    name: Clone update and Push
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup SSH
      uses: MrSquaare/ssh-setup-action@v1
      with:
          host: github.com
         # private-key: ${{ secrets.id_rsa }}
          private-key: ${{ secrets.SSH_PRIVATE_KEY }}          
    - name: Clone repository
      run: |
        rm -Rf *
        git clone git@github.com:Afayapascal/spring-petclinic-cloud-deployment.git
        ls
        cd spring-petclinic-cloud-deployment/
        cat values.yaml
        sed -i "s+tag.*+tag: ${GITHUB_SHA}+g" values.yaml
        cat values.yaml

    - name: Commit and push changes
      run: |
        ls
        cd spring-petclinic-cloud-deployment
        git config --global user.name "Afayapascal"
        git add -A
        git commit -m "mis Ã  jour de l'image avec le tag ${GITHUB_SHA}"
        git push origin master
